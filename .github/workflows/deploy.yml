name: Deploy BedrockChatbot

permissions:
  id-token: write # Required for GitHub to be able to create a token for you to authenticate with AWS
  contents: read  # Permits your action to read this repo.

on:
  push:
    branches:
      - main

jobs:
  run_tests:
    runs-on: ubuntu-20.04
    environment: test
    
    steps:
    - uses: actions/checkout@v2
    - name: Run script file
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_DEFAULT_OUTPUT: json
        allowListDomain : ${{ vars.ALLOW_LIST_DOMAIN }}
      run: |
        #apt-get update -qy
        #apt-get install -y curl gnupg software-properties-common
        #apt-get install -y unzip
      
          # Install Python 3
          #sudo apt-get install -y python3 python3-pip
      
          # Install Git (usually pre-installed in GitLab runners)
          #sudo apt-get install -y git
      
          # Install jq
          sudo apt-get install -y jq
      
          # Install AWS CLI
          #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          #unzip awscliv2.zip
          #./aws/install

          # Install AWS CDK
          npm install -g aws-cdk

          python3 --version
          git --version
          node --version
          jq --version
          aws --version
          cdk --version

          cd cdk
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install -r requirements.txt
          cd ..

          #chmod u+x ./deploy.sh
          #./deploy.sh

          user_pool_id=$(aws cognito-idp list-user-pools --max-results 60 --query 'UserPools[?contains(Name, `ChatbotUserPool`)].Id' --output text)
          if [ -n "$user_pool_id" ] && [ "$user_pool_id" != "None" ]; then
              cognitoDomain=$(aws cognito-idp describe-user-pool --user-pool-id "$user_pool_id" --query 'UserPool.Domain' --output text)
              if [ -n "$cognitoDomain" ] && [ "$cognitoDomain" != "None" ]; then
                  echo -e "${DEFAULT_COLOR}User pool found with ID $user_pool_id and domain $cognitoDomain"
              else
                  echo -e "${DEFAULT_COLOR}User pool found with ID $user_pool_id, but no Domain"
                  cognitoDomain="genchatbot-$(LC_ALL=C tr -dc 'a-z0-9' < /dev/urandom | head -c 8)-$(date +%y%m%d%H%M)"
                  echo -e "${DEFAULT_COLOR}New Domain Set: $cognitoDomain"
              fi
          else
              cognitoDomain="genchatbot-$(LC_ALL=C tr -dc 'a-z0-9' < /dev/urandom | head -c 8)-$(date +%y%m%d%H%M)"
              echo -e "${DEFAULT_COLOR}No User Pool or Domain Found, Creating New Domain: $cognitoDomain"
          fi
          
          #change to cdk Directory
          cd cdk
          if [ ! -d "./static-website-source" ]; then
              # Create the directory if it doesn't exist
              echo "Creating static-website-source directory..."
              mkdir ./static-website-source
              touch ./static-website-source/placeholder.txt
          fi
          
          # Install Python dependencies
          echo "installing python dependencies"
          python3 -m pip install -r requirements.txt
          
          # Check if CDK bootstrap has been completed
          echo "checking if CDK bootstrap has completed"
          bootstrap_ref_file="bootstrap.ref"
          
          if [ -f "$bootstrap_ref_file" ]; then
              echo "Skipping CDK bootstrap process."
          else
              if [ -n "$run_bootstrap" ]; then
                  # If --headless flag is used, run cdk bootstrap
                  echo "Running CDK bootstrap..."
                  cdk bootstrap --require-approval never --context cognitoDomain="$cognitoDomain" --context allowlistDomain="$allowListDomain"
                  if [ $? -eq 0 ]; then
                      echo "CDK bootstrap completed successfully."
                  else
                      echo "Failed to run CDK bootstrap."
                      exit 1
                  fi
              else
                  read -p "Do you want to run cdk Bootstrap now (if you don't know, assume Yes)? (y/n) " run_bootstrap
                  case "$run_bootstrap" in
                      [yY][eE][sS]|[yY])
                          echo "Running CDK bootstrap..."
                          cdk bootstrap --require-approval never --context cognitoDomain="$cognitoDomain" --context allowlistDomain="$allowListDomain"
                          if [ $? -eq 0 ]; then
                              echo "CDK bootstrap completed successfully."
                          else
                              echo "Failed to run CDK bootstrap."
                              exit 1
                          fi
                          ;;
                      *)
                          echo "Skipping CDK bootstrap process."
                          ;;
                  esac
              fi
          fi
          touch "$bootstrap_ref_file"
          
          # Deploy the CDK app
          echo "deploy the CDK app"
          cdk deploy --outputs-file outputs.json --context cognitoDomain="$cognitoDomain" --context allowlistDomain="$allowListDomain" --require-approval never $app_flag $context_flag $debug_flag $profile_flag $tags_flag $force_flag $verbose_flag $role_arn_flag
          if [ $? -ne 0 ]; then
              echo "Error: CDK deployment failed. Exiting script."
              exit 1
          fi
          
      shell: bash
